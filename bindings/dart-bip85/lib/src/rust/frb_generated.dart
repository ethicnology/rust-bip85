// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bip85.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class LibBip85
    extends BaseEntrypoint<LibBip85Api, LibBip85ApiImpl, LibBip85Wire> {
  @internal
  static final instance = LibBip85._();

  LibBip85._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    LibBip85Api? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<LibBip85ApiImpl, LibBip85Wire> get apiImplConstructor =>
      LibBip85ApiImpl.new;

  @override
  WireConstructor<LibBip85Wire> get wireConstructor =>
      LibBip85Wire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => 1370172147;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'bip85',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class LibBip85Api extends BaseApi {
  Uint8List crateApiBip85Derive({required String xprv, required String path});

  String crateApiBip85ToBase64(
      {required String xprv, required int length, required int index});

  String crateApiBip85ToBase85(
      {required String xprv, required int length, required int index});

  String crateApiBip85ToHex(
      {required String xprv, required int length, required int index});

  String crateApiBip85ToMnemonic(
      {required String xprv, required int wordCount, required int index});

  String crateApiBip85ToWif({required String xprv, required int index});

  String crateApiBip85ToXprv({required String xprv, required int index});
}

class LibBip85ApiImpl extends LibBip85ApiImplPlatform implements LibBip85Api {
  LibBip85ApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Uint8List crateApiBip85Derive({required String xprv, required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85DeriveConstMeta,
      argValues: [xprv, path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85DeriveConstMeta => const TaskConstMeta(
        debugName: "derive",
        argNames: ["xprv", "path"],
      );

  @override
  String crateApiBip85ToBase64(
      {required String xprv, required int length, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_u_32(length, serializer);
        sse_encode_u_32(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85ToBase64ConstMeta,
      argValues: [xprv, length, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85ToBase64ConstMeta => const TaskConstMeta(
        debugName: "to_base64",
        argNames: ["xprv", "length", "index"],
      );

  @override
  String crateApiBip85ToBase85(
      {required String xprv, required int length, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_u_32(length, serializer);
        sse_encode_u_32(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85ToBase85ConstMeta,
      argValues: [xprv, length, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85ToBase85ConstMeta => const TaskConstMeta(
        debugName: "to_base85",
        argNames: ["xprv", "length", "index"],
      );

  @override
  String crateApiBip85ToHex(
      {required String xprv, required int length, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_u_32(length, serializer);
        sse_encode_u_32(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85ToHexConstMeta,
      argValues: [xprv, length, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85ToHexConstMeta => const TaskConstMeta(
        debugName: "to_hex",
        argNames: ["xprv", "length", "index"],
      );

  @override
  String crateApiBip85ToMnemonic(
      {required String xprv, required int wordCount, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_u_32(wordCount, serializer);
        sse_encode_u_32(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85ToMnemonicConstMeta,
      argValues: [xprv, wordCount, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85ToMnemonicConstMeta => const TaskConstMeta(
        debugName: "to_mnemonic",
        argNames: ["xprv", "wordCount", "index"],
      );

  @override
  String crateApiBip85ToWif({required String xprv, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_u_32(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85ToWifConstMeta,
      argValues: [xprv, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85ToWifConstMeta => const TaskConstMeta(
        debugName: "to_wif",
        argNames: ["xprv", "index"],
      );

  @override
  String crateApiBip85ToXprv({required String xprv, required int index}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(xprv, serializer);
        sse_encode_u_32(index, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiBip85ToXprvConstMeta,
      argValues: [xprv, index],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiBip85ToXprvConstMeta => const TaskConstMeta(
        debugName: "to_xprv",
        argNames: ["xprv", "index"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
